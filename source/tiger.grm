(* This is the preamble where you can have arbitrary sml code. For us
it is empty *)

%%
(* The terminals or tokens of the language *)
%term CONST of int
    | VAR of string
    | ASSIGN
    | PLUS
    | MINUS
    | MUL
    | DIV
    | EOF
    | NEWLINE
    | OPBRAC
    | CLBRAC
    | PRINT

(* The nonterminals of the language *)
%nonterm EXP     of TIGER.Exp
       | STMT    of TIGER.Stmt
       | STMTS   of TIGER.Stmt list
       | PROGRAM of TIGER.Stmt list

%eop EOF (* What token to use as end of parsing token              *)
%verbose (* Generates a printed form of the table in expr.grm.desc *)
%pure


%name Tiger (* The prefix to use on the name of LrValFun structure *)


%noshift EOF
(*

Operator precedence and associativity. The %left says the operator is
left associative and the precedence increase as you go down this list.

*)
%left PLUS MINUS  (* + and - are of same precedence *)
%left MUL DIV    (* higher than + and -            *)
%left OPBRAC CLBRAC

(* The type that captures position in the input *)
%pos int

%%

PROGRAM : STMTS                ( STMTS )
	| STMTS NEWLINE         ( STMTS )

STMTS    : (* empty *)          ( []                  )
	| STMT NEWLINE STMTS     ( STMT :: STMTS         )

STMT :  VAR EXP              ( TIGER.Assign(VAR,EXP))
    | PRINT EXP               (TIGER.Print(EXP))

EXP     : CONST                ( TIGER.Val(CONST)     )
    | EXP PLUS EXP         ( TIGER.Exp(EXP1,TIGER.Plus,EXP2) )
    | OPBRAC EXP CLBRAC    ( EXP )
	| EXP MINUS EXP        ( TIGER.Exp(EXP1,TIGER.Minus,EXP2) )
	| EXP MUL   EXP        ( TIGER.Exp(EXP1,TIGER.Mul,EXP2) )
    | EXP DIV EXP          ( TIGER.Exp(EXP1,TIGER.Div,EXP2))
   
